{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/petru/Desktop/rss_feader/frontend/src/MapResult.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloud, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faSun, faSmog } from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport device from './responsive/Device';\nimport ForecastHour from './ForecastHour';\nimport ResultFadeIn from './ResultFadeIn';\nimport BigLabel from './BigLabel';\nimport MediumLabel from './MediumLabel';\nimport SmallLabel from './SmallLabel';\nimport Text from './Text';\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  margin-top: 15px;\n  animation: ${ResultFadeIn} 0.2s 0.4s forwards;\n`;\n_c = Results;\nconst LocationWrapper = styled.div`\n  flex-basis: 100%;\n  margin-top: -90px;\n`;\n_c2 = LocationWrapper;\nconst CurrentWeatherWrapper = styled.div`\n  flex-basis: 100%;\n  display: grid;\n  justify-content: center;\n  align-items: center;\n  grid-template-columns: auto 1fr;\n  margin: 20px 0;\n  grid-gap: 30px;\n  @media ${device.mobileL} {\n    flex-basis: 50%;\n    padding-right: 10px;\n  }\n  @media ${device.tablet} {\n    grid-template-columns: 1fr 1fr;\n    padding-right: 20px;\n  }\n`;\nconst WeatherIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 70px;\n  color: #ffffff;\n  @media ${device.tablet} {\n    font-size: 100px;\n    justify-content: flex-end;\n  }\n  @media ${device.laptop} {\n    font-size: 120px;\n  }\n  @media ${device.laptopL} {\n    font-size: 140px;\n  }\n`;\nconst TemperatureWrapper = styled.div``;\nconst Temperature = styled.h3`\n  display: block;\n  font-size: 50px;\n  font-weight: 400;\n  color: #ffffff;\n  @media ${device.tablet} {\n    font-size: 70px;\n  }\n  @media ${device.laptop} {\n    font-size: 90px;\n  }\n  @media ${device.laptopL} {\n    font-size: 110px;\n  }\n`;\nconst WeatherDetailsWrapper = styled.div`\n  flex-basis: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px 0;\n  margin: 20px 0;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 10px;\n  align-self: flex-start;\n  @media ${device.mobileL} {\n    flex-basis: 50%;\n  }\n`;\nconst WeatherDetail = styled.div`\n  flex-basis: calc(100% / 3);\n  padding: 10px;\n  @media ${device.laptop} {\n    padding: 20px 10px;\n  }\n`;\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  overflow: hidden;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: -20px;\n  max-width: 1000px;\n`;\n_c3 = ForecastWrapper;\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n_c4 = Forecast;\nconst months = ['Ianuarie', 'Februarie', 'Martie', 'Aprilie', 'Mai', 'Iunie', 'Iulie', 'August', 'Septembrie', 'Octombrie', 'Noiembrie', 'Decembrie'];\nconst days = ['Duminica', 'Luni', 'Marti', 'Miercuri', 'Joi', 'Vineri', 'Sambata'];\n\nconst Result = ({\n  weather\n}) => {\n  const {\n    city,\n    // date,\n    // description,\n    // main,\n    // temp,\n    // sunset,\n    // sunrise,\n    // humidity,\n    // wind,\n    // highestTemp,\n    // lowestTemp,\n    forecast\n  } = weather;\n\n  function getDate(stringDate) {\n    var date = new Date(stringDate);\n    return days[date.getDay()];\n  }\n\n  function getDay(stringDay) {\n    var val = stringDay.slice(-2);\n    if (val.charAt(0) === '0') return val.slice(-1);\n    return val;\n  }\n\n  function getMonth(stringMonth) {\n    var val = stringMonth.slice(5, 7);\n    return months[parseInt(val)];\n  }\n\n  let counter = 0;\n\n  function getIcon(description) {\n    if (description.includes(\"NINSOARE\")) {\n      return \"13d\";\n    }\n\n    if (description.includes(\"PRECIPITATII MIXTE\")) {\n      return \"10d\";\n    }\n\n    if (description.includes(\"PLOAIE SLABA\")) {\n      return \"09d\";\n    }\n\n    if (description === 'CER VARIABIL') {\n      return \"02d\";\n    } else if (description === 'CER PARTIAL NOROS') {\n      counter = (counter + 1) % 2;\n\n      if (counter % 2 === 0) {\n        return \"03d\";\n      } else {\n        return \"04d\";\n      }\n    }\n\n    return \"01d\";\n  }\n\n  const forecasts = forecast.map(item => /*#__PURE__*/_jsxDEV(ForecastHour, {\n    dayName: getDate(item.$.data),\n    temp_max: parseInt(item.temp_max[0]._),\n    temp_min: parseInt(item.temp_min[0]._),\n    icon: getIcon(item.fenomen_descriere[0]) //.icon}\n    ,\n    month: getMonth(item.$.data) //{item.dt_txt.slice(5, 7)}\n    ,\n    day: getDay(item.$.data) //{item.dt_txt.slice(8, 10)}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this));\n  let weatherIcon = null; //   if (main === 'Thunderstorm') {\n  //     weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n  //   } else if (main === 'Drizzle') {\n  //     weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n  //   } else if (main === 'Rain') {\n  //     weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  //   } else if (main === 'Snow') {\n  //     weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n  //   } else if (main === 'Clear') {\n  //     weatherIcon = <FontAwesomeIcon icon={faSun} />;\n  //   } else if (main === 'Clouds') {\n  //     weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n  //   } else {\n  //     weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n  //   }\n\n  return /*#__PURE__*/_jsxDEV(Results, {\n    children: [/*#__PURE__*/_jsxDEV(LocationWrapper, {\n      children: /*#__PURE__*/_jsxDEV(BigLabel, {\n        align: \"center\",\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(ForecastWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Forecast, {\n        children: forecasts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n\n_c5 = Result;\nResult.propTypes = {\n  weather: PropTypes.shape({\n    city: PropTypes.string,\n    country: PropTypes.string,\n    date: PropTypes.string,\n    description: PropTypes.string,\n    main: PropTypes.string,\n    temp: PropTypes.number,\n    sunrise: PropTypes.string,\n    sunset: PropTypes.string,\n    humidity: PropTypes.number,\n    wind: PropTypes.number,\n    highestTemp: PropTypes.number,\n    lowestTemp: PropTypes.number,\n    forecast: PropTypes.array\n  }).isRequired\n};\nexport default Result;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Results\");\n$RefreshReg$(_c2, \"LocationWrapper\");\n$RefreshReg$(_c3, \"ForecastWrapper\");\n$RefreshReg$(_c4, \"Forecast\");\n$RefreshReg$(_c5, \"Result\");","map":{"version":3,"sources":["/home/petru/Desktop/rss_feader/frontend/src/MapResult.js"],"names":["React","PropTypes","FontAwesomeIcon","faCloud","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faSmog","styled","device","ForecastHour","ResultFadeIn","BigLabel","MediumLabel","SmallLabel","Text","Results","div","LocationWrapper","CurrentWeatherWrapper","mobileL","tablet","WeatherIcon","laptop","laptopL","TemperatureWrapper","Temperature","h3","WeatherDetailsWrapper","WeatherDetail","ForecastWrapper","Forecast","months","days","Result","weather","city","forecast","getDate","stringDate","date","Date","getDay","stringDay","val","slice","charAt","getMonth","stringMonth","parseInt","counter","getIcon","description","includes","forecasts","map","item","$","data","temp_max","_","temp_min","fenomen_descriere","weatherIcon","propTypes","shape","string","country","main","temp","number","sunrise","sunset","humidity","wind","highestTemp","lowestTemp","array","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SACEC,OADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,mBAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,MAPF,QAQO,mCARP;AASA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,OAAO,GAAGR,MAAM,CAACS,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeN,YAAa;AAC5B,CAVA;KAAMK,O;AAYN,MAAME,eAAe,GAAGV,MAAM,CAACS,GAAI;AACnC;AACA;AACA,CAHA;MAAMC,e;AAKN,MAAMC,qBAAqB,GAAGX,MAAM,CAACS,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAWR,MAAM,CAACW,OAAQ;AAC1B;AACA;AACA;AACA,WAAWX,MAAM,CAACY,MAAO;AACzB;AACA;AACA;AACA,CAhBA;AAkBA,MAAMC,WAAW,GAAGd,MAAM,CAACS,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAWR,MAAM,CAACY,MAAO;AACzB;AACA;AACA;AACA,WAAWZ,MAAM,CAACc,MAAO;AACzB;AACA;AACA,WAAWd,MAAM,CAACe,OAAQ;AAC1B;AACA;AACA,CAhBA;AAkBA,MAAMC,kBAAkB,GAAGjB,MAAM,CAACS,GAAI,EAAtC;AAEA,MAAMS,WAAW,GAAGlB,MAAM,CAACmB,EAAG;AAC9B;AACA;AACA;AACA;AACA,WAAWlB,MAAM,CAACY,MAAO;AACzB;AACA;AACA,WAAWZ,MAAM,CAACc,MAAO;AACzB;AACA;AACA,WAAWd,MAAM,CAACe,OAAQ;AAC1B;AACA;AACA,CAdA;AAgBA,MAAMI,qBAAqB,GAAGpB,MAAM,CAACS,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAWR,MAAM,CAACW,OAAQ;AAC1B;AACA;AACA,CAZA;AAcA,MAAMS,aAAa,GAAGrB,MAAM,CAACS,GAAI;AACjC;AACA;AACA,WAAWR,MAAM,CAACc,MAAO;AACzB;AACA;AACA,CANA;AAQA,MAAMO,eAAe,GAAGtB,MAAM,CAACS,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMa,e;AASN,MAAMC,QAAQ,GAAGvB,MAAM,CAACS,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAWR,MAAM,CAACc,MAAO;AACzB;AACA;AACA,CAVA;MAAMQ,Q;AAYN,MAAMC,MAAM,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,EAAoC,SAApC,EAA+C,KAA/C,EAAsD,OAAtD,EAA+D,OAA/D,EAAwE,QAAxE,EAAkF,YAAlF,EAAgG,WAAhG,EAA6G,WAA7G,EAA0H,WAA1H,CAAf;AAEA,MAAMC,IAAI,GAAG,CAAC,UAAD,EAAa,MAAb,EAAqB,OAArB,EAA8B,UAA9B,EAA0C,KAA1C,EAAiD,QAAjD,EAA2D,SAA3D,CAAb;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC9B,QAAM;AACJC,IAAAA,IADI;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA;AAZI,MAaFF,OAbJ;;AAeA,WAASG,OAAT,CAAiBC,UAAjB,EAA6B;AACzB,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,UAAT,CAAX;AACA,WAAON,IAAI,CAACO,IAAI,CAACE,MAAL,EAAD,CAAX;AACH;;AAED,WAASA,MAAT,CAAgBC,SAAhB,EAA2B;AACvB,QAAIC,GAAG,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAC,CAAjB,CAAV;AACA,QAAID,GAAG,CAACE,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B,OAAOF,GAAG,CAACC,KAAJ,CAAU,CAAC,CAAX,CAAP;AAC3B,WAAOD,GAAP;AACH;;AAED,WAASG,QAAT,CAAkBC,WAAlB,EAA+B;AAC3B,QAAIJ,GAAG,GAAGI,WAAW,CAACH,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAV;AACA,WAAOb,MAAM,CAACiB,QAAQ,CAACL,GAAD,CAAT,CAAb;AACH;;AAGD,MAAIM,OAAO,GAAG,CAAd;;AAEA,WAASC,OAAT,CAAiBC,WAAjB,EAA8B;AAC5B,QAAIA,WAAW,CAACC,QAAZ,CAAqB,UAArB,CAAJ,EAAsC;AAClC,aAAO,KAAP;AACH;;AACD,QAAID,WAAW,CAACC,QAAZ,CAAqB,oBAArB,CAAJ,EAAgD;AAC5C,aAAO,KAAP;AACH;;AACD,QAAID,WAAW,CAACC,QAAZ,CAAqB,cAArB,CAAJ,EAA0C;AACtC,aAAO,KAAP;AACH;;AAED,QAAID,WAAW,KAAK,cAApB,EAAoC;AAChC,aAAO,KAAP;AACH,KAFD,MAEO,IAAIA,WAAW,KAAK,mBAApB,EAAyC;AAC5CF,MAAAA,OAAO,GAAG,CAAEA,OAAO,GAAG,CAAZ,IAAkB,CAA5B;;AACA,UAAIA,OAAO,GAAG,CAAV,KAAgB,CAApB,EAAuB;AACnB,eAAO,KAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACD;;AAED,QAAMI,SAAS,GAAGjB,QAAQ,CAACkB,GAAT,CAAaC,IAAI,iBACjC,QAAC,YAAD;AACE,IAAA,OAAO,EAAElB,OAAO,CAACkB,IAAI,CAACC,CAAL,CAAOC,IAAR,CADlB;AAEE,IAAA,QAAQ,EAAET,QAAQ,CAACO,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiBC,CAAlB,CAFpB;AAGE,IAAA,QAAQ,EAAEX,QAAQ,CAACO,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiBD,CAAlB,CAHpB;AAIE,IAAA,IAAI,EAAET,OAAO,CAACK,IAAI,CAACM,iBAAL,CAAuB,CAAvB,CAAD,CAJf,CAI2C;AAJ3C;AAKE,IAAA,KAAK,EAAEf,QAAQ,CAACS,IAAI,CAACC,CAAL,CAAOC,IAAR,CALjB,CAKgC;AALhC;AAME,IAAA,GAAG,EAAEhB,MAAM,CAACc,IAAI,CAACC,CAAL,CAAOC,IAAR,CANb,CAM2B;;AAN3B;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AAWA,MAAIK,WAAW,GAAG,IAAlB,CAtE8B,CAwEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE,QAAC,OAAD;AAAA,4BACG,QAAC,eAAD;AAAA,6BACC,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC,QAAhB;AAAA,kBACG3B;AADH;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADH,eAwDE,QAAC,eAAD;AAAA,6BACE,QAAC,QAAD;AAAA,kBAAWkB;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8DD,CAtJD;;MAAMpB,M;AAwJNA,MAAM,CAAC8B,SAAP,GAAmB;AACjB7B,EAAAA,OAAO,EAAEpC,SAAS,CAACkE,KAAV,CAAgB;AACvB7B,IAAAA,IAAI,EAAErC,SAAS,CAACmE,MADO;AAEvBC,IAAAA,OAAO,EAAEpE,SAAS,CAACmE,MAFI;AAGvB1B,IAAAA,IAAI,EAAEzC,SAAS,CAACmE,MAHO;AAIvBd,IAAAA,WAAW,EAAErD,SAAS,CAACmE,MAJA;AAKvBE,IAAAA,IAAI,EAAErE,SAAS,CAACmE,MALO;AAMvBG,IAAAA,IAAI,EAAEtE,SAAS,CAACuE,MANO;AAOvBC,IAAAA,OAAO,EAAExE,SAAS,CAACmE,MAPI;AAQvBM,IAAAA,MAAM,EAAEzE,SAAS,CAACmE,MARK;AASvBO,IAAAA,QAAQ,EAAE1E,SAAS,CAACuE,MATG;AAUvBI,IAAAA,IAAI,EAAE3E,SAAS,CAACuE,MAVO;AAWvBK,IAAAA,WAAW,EAAE5E,SAAS,CAACuE,MAXA;AAYvBM,IAAAA,UAAU,EAAE7E,SAAS,CAACuE,MAZC;AAavBjC,IAAAA,QAAQ,EAAEtC,SAAS,CAAC8E;AAbG,GAAhB,EAcNC;AAfc,CAAnB;AAkBA,eAAe5C,MAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faCloud,\n  faBolt,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faSnowflake,\n  faSun,\n  faSmog,\n} from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport device from './responsive/Device';\nimport ForecastHour from './ForecastHour';\nimport ResultFadeIn from './ResultFadeIn';\nimport BigLabel from './BigLabel';\nimport MediumLabel from './MediumLabel';\nimport SmallLabel from './SmallLabel';\nimport Text from './Text';\n\nconst Results = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 40px 0;\n  opacity: 0;\n  visibility: hidden;\n  position: relative;\n  margin-top: 15px;\n  animation: ${ResultFadeIn} 0.2s 0.4s forwards;\n`;\n\nconst LocationWrapper = styled.div`\n  flex-basis: 100%;\n  margin-top: -90px;\n`;\n\nconst CurrentWeatherWrapper = styled.div`\n  flex-basis: 100%;\n  display: grid;\n  justify-content: center;\n  align-items: center;\n  grid-template-columns: auto 1fr;\n  margin: 20px 0;\n  grid-gap: 30px;\n  @media ${device.mobileL} {\n    flex-basis: 50%;\n    padding-right: 10px;\n  }\n  @media ${device.tablet} {\n    grid-template-columns: 1fr 1fr;\n    padding-right: 20px;\n  }\n`;\n\nconst WeatherIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 70px;\n  color: #ffffff;\n  @media ${device.tablet} {\n    font-size: 100px;\n    justify-content: flex-end;\n  }\n  @media ${device.laptop} {\n    font-size: 120px;\n  }\n  @media ${device.laptopL} {\n    font-size: 140px;\n  }\n`;\n\nconst TemperatureWrapper = styled.div``;\n\nconst Temperature = styled.h3`\n  display: block;\n  font-size: 50px;\n  font-weight: 400;\n  color: #ffffff;\n  @media ${device.tablet} {\n    font-size: 70px;\n  }\n  @media ${device.laptop} {\n    font-size: 90px;\n  }\n  @media ${device.laptopL} {\n    font-size: 110px;\n  }\n`;\n\nconst WeatherDetailsWrapper = styled.div`\n  flex-basis: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px 0;\n  margin: 20px 0;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 10px;\n  align-self: flex-start;\n  @media ${device.mobileL} {\n    flex-basis: 50%;\n  }\n`;\n\nconst WeatherDetail = styled.div`\n  flex-basis: calc(100% / 3);\n  padding: 10px;\n  @media ${device.laptop} {\n    padding: 20px 10px;\n  }\n`;\n\nconst ForecastWrapper = styled.div`\n  flex-basis: 100%;\n  overflow: hidden;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: -20px;\n  max-width: 1000px;\n`;\n\nconst Forecast = styled.div`\n  position: relative;\n  display: flex;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  scrollbar-color: lightgray #ffffff;\n  scrollbar-width: thin;\n  @media ${device.laptop} {\n    order: 4;\n  }\n`;\n\nconst months = ['Ianuarie', 'Februarie', 'Martie', 'Aprilie', 'Mai', 'Iunie', 'Iulie', 'August', 'Septembrie', 'Octombrie', 'Noiembrie', 'Decembrie',];\n\nconst days = ['Duminica', 'Luni', 'Marti', 'Miercuri', 'Joi', 'Vineri', 'Sambata'];\n\nconst Result = ({ weather }) => {\n  const {\n    city,\n    // date,\n    // description,\n    // main,\n    // temp,\n    // sunset,\n    // sunrise,\n    // humidity,\n    // wind,\n    // highestTemp,\n    // lowestTemp,\n    forecast,\n  } = weather;\n\n  function getDate(stringDate) {\n      var date = new Date(stringDate)\n      return days[date.getDay()]\n  }\n\n  function getDay(stringDay) {\n      var val = stringDay.slice(-2);\n      if (val.charAt(0) === '0') return val.slice(-1);\n      return val;\n  }\n\n  function getMonth(stringMonth) {\n      var val = stringMonth.slice(5, 7)\n      return months[parseInt(val)];\n  }\n\n\n  let counter = 0;\n\n  function getIcon(description) {\n    if (description.includes(\"NINSOARE\")) {\n        return \"13d\"\n    }\n    if (description.includes(\"PRECIPITATII MIXTE\")) {\n        return \"10d\";\n    }\n    if (description.includes(\"PLOAIE SLABA\")) {\n        return \"09d\";\n    }\n\n    if (description === 'CER VARIABIL') {\n        return \"02d\"\n    } else if (description === 'CER PARTIAL NOROS') {\n        counter = ( counter + 1 ) % 2;\n        if (counter % 2 === 0) {\n            return \"03d\";\n        } else {\n            return \"04d\";\n        }\n    }\n    return \"01d\";\n  }\n\n  const forecasts = forecast.map(item => (\n    <ForecastHour\n      dayName={getDate(item.$.data)}\n      temp_max={parseInt(item.temp_max[0]._)}\n      temp_min={parseInt(item.temp_min[0]._)}\n      icon={getIcon(item.fenomen_descriere[0])}//.icon}\n      month={getMonth(item.$.data)} //{item.dt_txt.slice(5, 7)}\n      day={getDay(item.$.data)}//{item.dt_txt.slice(8, 10)}\n    />\n  ));\n\n  let weatherIcon = null;\n\n//   if (main === 'Thunderstorm') {\n//     weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n//   } else if (main === 'Drizzle') {\n//     weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n//   } else if (main === 'Rain') {\n//     weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n//   } else if (main === 'Snow') {\n//     weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n//   } else if (main === 'Clear') {\n//     weatherIcon = <FontAwesomeIcon icon={faSun} />;\n//   } else if (main === 'Clouds') {\n//     weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n//   } else {\n//     weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n//   }\n\n  return (\n    <Results>\n       <LocationWrapper>\n        <BigLabel align=\"center\">\n          {city}\n        </BigLabel>\n        {/* <SmallLabel weight=\"400\">{date}</SmallLabel> */}\n      </LocationWrapper>\n      {/*\n      <CurrentWeatherWrapper>\n        <WeatherIcon>{weatherIcon}</WeatherIcon>\n        <TemperatureWrapper>\n          <Temperature>{Math.floor(temp)}&#176;</Temperature>\n          <SmallLabel weight=\"400\" firstToUpperCase>\n            {description}\n          </SmallLabel>\n        </TemperatureWrapper>\n      </CurrentWeatherWrapper> */}\n      {/* <WeatherDetailsWrapper>\n        <WeatherDetail>\n          <SmallLabel align=\"center\" weight=\"400\">\n            {Math.floor(highestTemp)}&#176;\n          </SmallLabel>\n          <Text align=\"center\">Hight</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <SmallLabel align=\"center\" weight=\"400\">\n            {wind}mph\n          </SmallLabel>\n          <Text align=\"center\">Wind</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <SmallLabel align=\"center\" weight=\"400\">\n            {sunrise}\n          </SmallLabel>\n          <Text align=\"center\">Sunrise</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <SmallLabel align=\"center\" weight=\"400\">\n            {Math.floor(lowestTemp)}&#176;\n          </SmallLabel>\n          <Text align=\"center\">Low</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <SmallLabel align=\"center\" weight=\"400\">\n            {humidity}%\n          </SmallLabel>\n          <Text align=\"center\">Rain</Text>\n        </WeatherDetail>\n        <WeatherDetail>\n          <SmallLabel align=\"center\" weight=\"400\">\n            {sunset}\n          </SmallLabel>\n          <Text align=\"center\">Sunset</Text>\n        </WeatherDetail>\n      </WeatherDetailsWrapper>\n      */}\n      <ForecastWrapper>\n        <Forecast>{forecasts}</Forecast>\n      </ForecastWrapper>\n    </Results>\n  );\n};\n\nResult.propTypes = {\n  weather: PropTypes.shape({\n    city: PropTypes.string,\n    country: PropTypes.string,\n    date: PropTypes.string,\n    description: PropTypes.string,\n    main: PropTypes.string,\n    temp: PropTypes.number,\n    sunrise: PropTypes.string,\n    sunset: PropTypes.string,\n    humidity: PropTypes.number,\n    wind: PropTypes.number,\n    highestTemp: PropTypes.number,\n    lowestTemp: PropTypes.number,\n    forecast: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}